
'''
0. 
Objective: Begin your journey with Django REST Framework by setting up a new Django project from scratch, specifically for building APIs. This task will introduce you to the initial steps necessary to integrate DRF and prepare for creating API endpoints.

Task Description:
In this task, you will create a new Django project, configure Django REST Framework, and prepare the environment for future tasks focused on building APIs.

Step 1: Create a New Django Project
Start by setting up a new Django project dedicated to API development.

Installation and Project Creation:
If not already installed, install Django using pip install django.
Create a new Django project named api_project by running django-admin startproject api_project.
Step 2: Install Django REST Framework
Add Django REST Framework to your new project to facilitate API development.

Install DRF:
Run pip install djangorestframework to install the framework.
Add 'rest_framework' to the INSTALLED_APPS in the settings.py of your api_project.
Step 3: Create a New Django App
Set up an app within your project that will be specifically used for handling API logic.

Create App:
Inside the api_project directory, run python manage.py startapp api.
Add 'api' to the INSTALLED_APPS in settings.py.
Step 4: Define a Simple Model
Create a model to be used for your first API. This model will be simple, designed to be easily understood and used in an API.

Example Model:
In api/models.py, define a Book model with basic fields such as title (a CharField) and author (a CharField).
Step 5: Run Migrations
Set up your database tables based on the new models created.

Migrate Database:
Run python manage.py makemigrations and python manage.py migrate to create and apply migrations.
Step 6: Start the Development Server
Ensure that your setup is correct by running the Django development server.

Start Server:
Use python manage.py runserver to start the server and visit http://127.0.0.1:8000/ to confirm the server is running correctly.

'''

'''
1. 
Objective: Develop a simple API endpoint using Django REST Framework that allows clients to retrieve information about books stored in your database. This will introduce you to the core components of DRF, including serializers and views.

Task Description:
In this task within your newly created api_project, you will set up a basic API endpoint to list all books using Django REST Framework. This will involve creating serializers, views, and routing configurations.

Step 1: Create the Serializer
You need a serializer to convert your Book model instances into JSON format.

Define the Serializer:
In the api app, create a new file named serializers.py.
Define a BookSerializer class that extends rest_framework.serializers.ModelSerializer and includes all fields of the Book model.
Step 2: Create the API View
Set up a view that uses the serializer to retrieve and return book data.

Define the View:
In api/views.py, create a view named BookList that extends rest_framework.generics.ListAPIView.
Use the BookSerializer to serialize the data and the Book model as the queryset.
Your url pattern should look like this:

urlpatterns = [
    path('books/', BookList.as_view(), name='book-list'),  # Maps to the BookList view
]
Also, ensure that the main api_project/urls.py file includes a route to your api app. Something like this path('api/', include('api.urls')) should work fine.

This step connects the app’s URLs to the overall project.

Step 3: Configure URL Patterns
Ensure the API endpoint is accessible via HTTP by setting up the corresponding URL.

URL Setup:
In api/urls.py (create this file if it doesn’t exist), include a URL pattern that routes to your BookList view.
Use Django’s path() function to map the URL to your view.
Step 4: Test the API Endpoint
After setting up the endpoint, test it to ensure it functions as expected.

Testing Method:
Use tools like curl, Postman, or your browser to access the endpoint and verify that it returns a JSON list of books.
Deliverables:
serializers.py: Includes the BookSerializer.
views.py: Contains the BookList view definition.
urls.py: Configured with the URL for accessing the BookList API endpoint.

'''

'''
2. 
Objective: Expand your API functionality by using Django REST Framework’s ViewSets and Routers to implement CRUD (Create, Read, Update, Delete) operations on the Book model. This approach simplifies the management of standard database operations through RESTful APIs.

Task Description:
In this task, you will replace the simple list view created previously with a full set of CRUD operations using DRF’s ViewSets. This will allow clients to not only retrieve but also create, update, and delete books via your API.

Step 1: Create a ViewSet
ViewSets in DRF allow you to consolidate common logic for handling standard operations into a single class that handles all HTTP methods (GET, POST, PUT, DELETE).

Define the ViewSet:
In api/views.py, extend the existing view setup by adding a new class BookViewSet that handles all CRUD operations.
Use rest_framework.viewsets.ModelViewSet, which provides implementations for various actions like list, create, retrieve, update, and destroy.
Step 2: Set Up a Router
Routers in DRF automatically determine the URL conf based on your ViewSet.

Configure the Router:
In api/urls.py, import DefaultRouter from rest_framework.routers and register your BookViewSet.
Register the BookViewSet with the router as follows:
router.register(r'books_all', BookViewSet, basename='book_all')
The router will handle creating the appropriate URL patterns for all CRUD operations on the Book model.
Your url patterns in `api/urls.py should now look like this:

urlpatterns = [
    # Route for the BookList view (ListAPIView)
    path('books/', BookList.as_view(), name='book-list'),

    # Include the router URLs for BookViewSet (all CRUD operations)
    path('', include(router.urls)),  # This includes all routes registered with the router
]
Step 3: Test CRUD Operations
Ensure that each of the CRUD operations works as expected. Test creating, retrieving, updating, and deleting books through your API.

Testing Method:
Use tools like Postman or curl to send POST, GET, PUT, and DELETE requests to your API endpoints and verify the responses.
Tip: Be sure to test the following operations:

GET /books_all/ – List all books
GET /books_all/<id>/ – Retrieve a book by its ID
POST /books_all/ – Create a new book
PUT /books_all/<id>/ – Update a book
DELETE /books_all/<id>/ – Delete a book
Deliverables:
views.py: Updated with BookViewSet that handles all CRUD operations.
urls.py: Includes the configuration using DefaultRouter to route requests to the BookViewSet.

'''

'''
3. 
Objective: Secure your API endpoints by implementing various authentication schemes and permission settings in Django REST Framework. This task will ensure that only authorized users can access and modify data through your API.

Task Description:
For this task within your api_project, you will add authentication and permission layers to your existing API endpoints. This will involve configuring DRF to use token authentication and setting up permission classes to restrict access based on user roles or authentication status.

Step 1: Configure Authentication
Set up token authentication in DRF, allowing your API to handle and verify tokens for authenticated requests.

Install and Configure Authentication:
If not already included, add rest_framework.authtoken to your INSTALLED_APPS in settings.py.
Run python manage.py migrate to create the necessary database tables for token management.
Update your DRF settings in settings.py to include token authentication in the DEFAULT_AUTHENTICATION_CLASSES.
Step 2: Generate and Use Tokens
Provide a way for users to obtain a token and use it for authenticated requests.

Token Retrieval Endpoint:
Implement a view that allows users to obtain a token by providing their username and password.
This can be done using DRF’s built-in views like obtain_auth_token.
Step 3: Define Permission Classes
Control who can access your API views based on permissions. Define custom permission classes or use DRF’s built-in permissions to restrict access.

Set Up Permissions:
Use rest_framework.permissions to apply basic permissions like IsAuthenticated, IsAdminUser, or custom permissions based on your application’s needs.
Modify your ViewSet configurations to include the appropriate permissions.
Step 4: Test Authentication and Permissions
Verify that your API endpoints are secure by testing with and without authentication tokens, and check the behavior based on different user permissions.

Testing Authentication:
Use tools like Postman or curl to send requests with and without the token to see if the permissions are enforced correctly.
Step 5: Document the Authentication and Permission Setup
Provide documentation or comments in your code explaining how authentication and permissions are configured and how they work in your API setup.

Deliverables:
Updated settings.py: Include token authentication in the REST framework settings.
Authentication Views: Implement or enable views for token retrieval.
views.py: Update viewsets with permission classes.

'''